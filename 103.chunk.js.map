{"version":3,"file":"103.chunk.js","mappings":"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","sources":["webpack://wave_sight/./src/components/BreadCrumb/index.js","webpack://wave_sight/./src/components/PasswordModal/index.js","webpack://wave_sight/./src/pages/common/Profile/index.js"],"sourcesContent":["/** @format */\r\n\r\nimport React from 'react';\r\nimport { Breadcrumb } from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst BreadCrumb = props => {\r\n    const matchName = location.pathname.startsWith('/wave-sight')\r\n        ? location.pathname.substring('/wave-sight'.length)\r\n        : location.pathname;\r\n    return (\r\n        <Breadcrumb className=\"m-3\">\r\n            {props.matches.map((match, index) => {\r\n                const { path, breadcrumbName } = match.route;\r\n                const isActive = match.pathname === matchName;\r\n\r\n                return isActive ? (\r\n                    <Breadcrumb.Item className=\"font-content fs-5 fw-bold\" key={index} active>\r\n                        {breadcrumbName === 'Detail' ? props.name : breadcrumbName}\r\n                    </Breadcrumb.Item>\r\n                ) : (\r\n                    <Breadcrumb.Item className=\"font-content fs-5 fw-bold\" key={index}>\r\n                        <NavLink to={path}>{breadcrumbName}</NavLink>\r\n                    </Breadcrumb.Item>\r\n                );\r\n            })}\r\n        </Breadcrumb>\r\n    );\r\n};\r\nexport default BreadCrumb;\r\n","/** @format */\r\n\r\nimport React, { useRef } from 'react';\r\nimport useInputValidate from '../../hooks/useInputValidate';\r\nimport { Button, Form, FormGroup, FormControl, FormLabel } from 'react-bootstrap';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { PASSWORD_REGEX } from '../../utils/constants/formValid';\r\n\r\nconst isPasswordFormat = value => PASSWORD_REGEX.test(value);\r\n\r\nconst PasswordModal = ({\r\n    onDisplay,\r\n    isDisplay,\r\n    onFormSubmit,\r\n    info: { user_id },\r\n}) => {\r\n    const checkPasswordRef = useRef();\r\n    const oldPasswordRef = useRef();\r\n    const confirmPasswordRef = useRef();\r\n    const isNewPasswordFormat = value => {\r\n        onBlurConfirmPassword();\r\n        return value !== oldPasswordRef.current.value && isPasswordFormat(value);\r\n    };\r\n    const isPasswordMatchFormat = value => value === checkPasswordRef.current.value;\r\n    const {\r\n        value: oldPassword,\r\n        message: messageOldPassword,\r\n        isValid: oldPasswordIsValid,\r\n        isConfirm: oldPasswordIsConfirm,\r\n        onChangeValue: onChangeOldPassword,\r\n        onBlurValue: onBlurOldPassword,\r\n    } = useInputValidate(isPasswordFormat, 'old password');\r\n\r\n    const {\r\n        value: newPassword,\r\n        message: messageNewPassword,\r\n        isValid: newPasswordIsValid,\r\n        isConfirm: newPasswordIsConfirm,\r\n        onChangeValue: onChangeNewPassword,\r\n        onBlurValue: onBlurNewPassword,\r\n    } = useInputValidate(isNewPasswordFormat, 'new password');\r\n\r\n    const {\r\n        value: confirmPassword,\r\n        message: messageConfirmPassword,\r\n        isValid: confirmPasswordIsValid,\r\n        isConfirm: confirmPasswordIsConfirm,\r\n        onChangeValue: onChangeConfirmPassword,\r\n        onBlurValue: onBlurConfirmPassword,\r\n    } = useInputValidate(isPasswordMatchFormat, 'confirm password');\r\n\r\n    return (\r\n        <Modal\r\n            show={isDisplay}\r\n            onHide={onDisplay}\r\n            size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            contentClassName=\"bg-light-gray\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title className=\"font-title fs-2\" id=\"contained-modal-title-vcenter\">\r\n                    Password Change\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form\r\n                    onSubmit={onFormSubmit({ user_id, oldPassword, newPassword })}\r\n                    className=\"d-flex flex-column\"\r\n                >\r\n                    <FormGroup className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                        <FormLabel className=\"font-content fs-5\">Old Password</FormLabel>\r\n                        <FormControl\r\n                            type=\"password\"\r\n                            placeholder=\"input old password\"\r\n                            value={oldPassword}\r\n                            ref={oldPasswordRef}\r\n                            onChange={onChangeOldPassword}\r\n                            onBlur={onBlurOldPassword}\r\n                        />\r\n                        <Form.Text className=\"text-danger\" hidden={oldPasswordIsValid}>\r\n                            {messageOldPassword}\r\n                        </Form.Text>\r\n                    </FormGroup>\r\n                    <FormGroup className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                        <FormLabel className=\"font-content fs-5\">New Password</FormLabel>\r\n                        <FormControl\r\n                            type=\"password\"\r\n                            placeholder=\"input new password\"\r\n                            ref={checkPasswordRef}\r\n                            value={newPassword}\r\n                            onChange={onChangeNewPassword}\r\n                            onBlur={onBlurNewPassword}\r\n                        />\r\n                        <Form.Text className=\"text-danger\" hidden={newPasswordIsValid}>\r\n                            {messageNewPassword}\r\n                        </Form.Text>\r\n                    </FormGroup>\r\n                    <FormGroup className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                        <FormLabel className=\"font-content fs-5\">Password Confirm</FormLabel>\r\n                        <FormControl\r\n                            type=\"password\"\r\n                            value={confirmPassword}\r\n                            ref={confirmPasswordRef}\r\n                            placeholder=\"Enter Password Again\"\r\n                            onChange={onChangeConfirmPassword}\r\n                            onBlur={onBlurConfirmPassword}\r\n                        />\r\n                        <Form.Text className=\"text-danger\" hidden={confirmPasswordIsValid}>\r\n                            {messageConfirmPassword}\r\n                        </Form.Text>\r\n                    </FormGroup>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        disabled={\r\n                            (!oldPasswordIsConfirm ||\r\n                                !newPasswordIsConfirm ||\r\n                                !confirmPasswordIsConfirm)\r\n                        }\r\n                        className=\"fs-5 align-self-end\"\r\n                        variant=\"outline-light bg-deep-gray text-white font-btn fw-bold\"\r\n                    >\r\n                        Confirm Change\r\n                    </Button>\r\n                </Form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n};\r\nexport default PasswordModal;\r\n","/** @format */\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { matchRoutes, useNavigate } from 'react-router-dom';\r\nimport { routes } from '../../../router/routesList';\r\nimport { Formik, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { userTypes } from '../../../redux/userModule';\r\nimport BreadCrumb from '../../../components/BreadCrumb';\r\nimport { Button, Row, Col } from 'react-bootstrap';\r\nimport withModal from '../../../HOC/withModal';\r\nimport PasswordModal from '../../../components/PasswordModal';\r\n\r\nconst valuesSchema = Yup.object().shape({\r\n  userPhone: Yup.string()\r\n    .required('required!')\r\n    .test('is-valid-phone', 'Invalid format!', value => {\r\n      if (value) {\r\n        return /^0\\d{9}$/.test(value);\r\n      }\r\n      return false;\r\n    })\r\n    .min(10, 'Words cannot be less than 10!')\r\n    .max(10, 'Words should be less than 10!'),\r\n  userAddress: Yup.string()\r\n    .required('required!')\r\n    .min(6, 'Words cannot be less than 6!')\r\n    .max(28, 'Words should be less than 28!'),\r\n});\r\nconst Profile = () => {\r\n  const PasswordWithModal = withModal(PasswordModal);\r\n  const [isEdit, setIsEdit] = useState(true);\r\n  const [isPasswordShow, setIsPasswordShow] = useState(false);\r\n  const matchName = location.pathname.startsWith('/wave-sight')\r\n    ? location.pathname.substring('/wave-sight'.length)\r\n    : location.pathname;\r\n  const matches = matchRoutes(routes, matchName);\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const { info, isLogin } = useSelector(state => state.user);\r\n  const { _id: user_id, user_name, user_role, user_email, user_address, user_phone } =\r\n    info || {};\r\n  const loginToken = localStorage.getItem('loginToken');\r\n\r\n  useEffect(() => {\r\n    if ((isLogin || !loginToken) && !isLogin) {\r\n      navigate('/');\r\n    }\r\n  }, [isLogin]);\r\n\r\n  const initialValues = {\r\n    userPhone: user_phone || '',\r\n    userAddress: user_address || '',\r\n  };\r\n\r\n  const handleEditUser = () => {\r\n    setIsEdit(prev => !prev);\r\n  };\r\n\r\n  const handleFormSubmit = formValue => {\r\n    dispatch({\r\n      type: userTypes.UPDATE_USER_REQUEST,\r\n      payload: { user_id, formValue },\r\n    });\r\n    setIsEdit(prev => !prev);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <BreadCrumb matches={matches} />\r\n      <div className=\"bg-gray\">\r\n        <h1 className=\"border d-flex font-title justify-content-center mt-2 text-white\">\r\n          Profile\r\n        </h1>\r\n      </div>\r\n      <Row className=\"border m-2 min-vh-100 p-2\">\r\n        <Col>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={valuesSchema}\r\n            onSubmit={handleFormSubmit}\r\n          >\r\n            {({ handleSubmit }) => (\r\n              <Form onSubmit={handleSubmit} className=\"d-flex flex-column my-2\">\r\n                <fieldset disabled>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"font-content fs-5 fw-bold me-1 mt-1\">\r\n                      Name :\r\n                    </Form.Label>\r\n                    <Form.Control id=\"disabledTextInput\" placeholder={user_name} />\r\n                  </Form.Group>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"font-content fs-5 fw-bold me-1 mt-1\">\r\n                      Email :\r\n                    </Form.Label>\r\n                    <Form.Control id=\"disabledTextInput\" placeholder={user_email} />\r\n                  </Form.Group>\r\n                </fieldset>\r\n                <fieldset disabled={isEdit}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"font-content fs-5 fw-bold me-1 mt-1\">\r\n                      Phone :\r\n                    </Form.Label>\r\n                    <Field name=\"userPhone\">\r\n                      {({ field }) => <Form.Control type=\"text\" {...field} />}\r\n                    </Field>\r\n                    <ErrorMessage name=\"userPhone\">\r\n                      {error => (\r\n                        <Form.Label className=\"d-flex fw-bold me-1 text-red\">{error}</Form.Label>\r\n                      )}\r\n                    </ErrorMessage>\r\n                  </Form.Group>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"font-content fs-5 fw-bold me-1 mt-1\">\r\n                      Address :\r\n                    </Form.Label>\r\n                    <Field name=\"userAddress\">\r\n                      {({ field }) => <Form.Control type=\"text\" {...field} />}\r\n                    </Field>\r\n                    <ErrorMessage name=\"userAddress\">\r\n                      {error => (\r\n                        <Form.Label className=\"d-flex fw-bold me-1 text-red\">{error}</Form.Label>\r\n                      )}\r\n                    </ErrorMessage>\r\n                  </Form.Group>\r\n                </fieldset>\r\n                {isEdit ? null : (\r\n                  <Button\r\n                    type=\"submit\"\r\n                    size=\"sm\"\r\n                    className=\"align-self-end bg-beige border border-black font-btn fs-5 fw-bold me-2 text-black\"\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                )}\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n          <div className=\"d-flex justify-content-end\">\r\n            <Button\r\n              type=\"submit\"\r\n              size=\"sm\"\r\n              className=\"btn-deep-gray font-btn fs-5 fw-bold me-2 text-white\"\r\n              onClick={handleEditUser}\r\n            >\r\n              {isEdit ? 'Edit' : 'Cancel'}\r\n            </Button>\r\n            <PasswordWithModal\r\n              name=\"Change Password\"\r\n              info={{ user_id, user_role }}\r\n              actionType={userTypes.UPDATE_PASSWORD_REQUEST}\r\n              btnSize={5}\r\n            />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\nexport default Profile;\r\n"],"names":["props","matchName","location","pathname","startsWith","substring","length","React","Breadcrumb","className","matches","map","match","index","_match$route","route","path","breadcrumbName","key","active","name","NavLink","to","isPasswordFormat","value","PASSWORD_REGEX","_ref","onDisplay","isDisplay","onFormSubmit","user_id","info","checkPasswordRef","useRef","oldPasswordRef","confirmPasswordRef","_useInputValidate","useInputValidate","oldPassword","messageOldPassword","message","oldPasswordIsValid","isValid","oldPasswordIsConfirm","isConfirm","onChangeOldPassword","onChangeValue","onBlurOldPassword","onBlurValue","_useInputValidate2","onBlurConfirmPassword","current","newPassword","messageNewPassword","newPasswordIsValid","newPasswordIsConfirm","onChangeNewPassword","onBlurNewPassword","_useInputValidate3","confirmPassword","messageConfirmPassword","confirmPasswordIsValid","confirmPasswordIsConfirm","onChangeConfirmPassword","Modal","show","onHide","size","contentClassName","centered","closeButton","id","Form","onSubmit","FormGroup","controlId","FormLabel","FormControl","type","placeholder","ref","onChange","onBlur","hidden","Button","disabled","variant","valuesSchema","Yup","shape","userPhone","required","test","min","max","userAddress","PasswordWithModal","withModal","PasswordModal","_useState","useState","_useState2","_slicedToArray","isEdit","setIsEdit","_useState3","_useState4","matchRoutes","routes","navigate","useNavigate","dispatch","useDispatch","_useSelector","useSelector","state","user","isLogin","_id","user_name","user_role","user_email","user_address","user_phone","loginToken","localStorage","getItem","useEffect","initialValues","BreadCrumb","Row","Col","Formik","validationSchema","formValue","userTypes","payload","prev","_ref2","handleSubmit","Field","_ref3","field","_extends","ErrorMessage","error","_ref4","onClick","actionType","btnSize"],"sourceRoot":""}