{"version":3,"file":"177.chunk.js","mappings":"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","sources":["webpack://wave_sight/./src/utils/tools/setTextColor.ts","webpack://wave_sight/./src/components/BreadCrumb/index.js","webpack://wave_sight/./src/containers/ShoppingForm/index.js","webpack://wave_sight/./src/pages/common/Detail/index.js"],"sourcesContent":["/** @format */\nexport var setTextColor = function (color) {\n    var colors = {\n        white: '#FFFFFF',\n        black: '#000000',\n        gray: '#808080',\n        glue: '#0000FF',\n        'dark-blue': '#00008a',\n        'dark-turquoise': '#00ced1',\n        denim: '#1560BD',\n        navy: '#000080',\n        red: '#FF0000',\n        purple: '#800080',\n        violet: '#8B00FF',\n        lavender: '#e6e6fa',\n        pink: '#FFC0CB',\n        yellow: '#FFFF00',\n        beige: '#f5f5dc',\n        orange: '#FFA500',\n        brown: '#A52A2A',\n        coffee: '#4D3900',\n        khaki: '#f0e68c',\n        'khaki-green': '#8A865D',\n        green: '#00FF00',\n        olive: '#808000',\n        'light-green': '#90EE90',\n        'light-blue': '#ADD8E6',\n        cyan: '#00FFFF',\n    };\n    if (typeof colors[color] != 'undefined') {\n        var compareColor = 384;\n        var colorArray = [];\n        var colorValue = colors[color].substring(1);\n        for (var i = 0; i < colorValue.length; i++) {\n            colorArray.push(parseInt(colorValue.slice(i, i + 2), 16));\n            i++;\n        }\n        return colorArray[0] + colorArray[1] + colorArray[2] > compareColor;\n    }\n};\n","/** @format */\r\n\r\nimport React from 'react';\r\nimport { Breadcrumb } from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst BreadCrumb = props => {\r\n    const matchName = location.pathname.startsWith('/wave-sight')\r\n        ? location.pathname.substring('/wave-sight'.length)\r\n        : location.pathname;\r\n    return (\r\n        <Breadcrumb className=\"m-3\">\r\n            {props.matches.map((match, index) => {\r\n                const { path, breadcrumbName } = match.route;\r\n                const isActive = match.pathname === matchName;\r\n\r\n                return isActive ? (\r\n                    <Breadcrumb.Item className=\"font-content fs-5 fw-bold\" key={index} active>\r\n                        {breadcrumbName === 'Detail' ? props.name : breadcrumbName}\r\n                    </Breadcrumb.Item>\r\n                ) : (\r\n                    <Breadcrumb.Item className=\"font-content fs-5 fw-bold\" key={index}>\r\n                        <NavLink to={path}>{breadcrumbName}</NavLink>\r\n                    </Breadcrumb.Item>\r\n                );\r\n            })}\r\n        </Breadcrumb>\r\n    );\r\n};\r\nexport default BreadCrumb;\r\n","import React, { useState } from 'react';\r\nimport { Formik, Field, ErrorMessage } from 'formik';\r\nimport {\r\n    ToggleButton,\r\n    ToggleButtonGroup,\r\n    Form,\r\n    Button,\r\n    ButtonGroup,\r\n} from 'react-bootstrap';\r\nimport { setTextColor } from '../../utils/tools/setTextColor';\r\nimport uuid from 'react-uuid';\r\nimport * as Yup from 'yup';\r\n\r\nconst valuesSchema = Yup.object().shape({\r\n    color: Yup.string().required('Please pick a color!'),\r\n    size: Yup.string().required('Please pick a size!'),\r\n});\r\n\r\nconst ShoppingForm = ({ onFormSubmit, initialValue }) => {\r\n    const { product_colors, product_sizes } = initialValue\r\n    console.log(initialValue)\r\n    return (\r\n        <Formik\r\n            initialValues={{ color: '', size: '', quantity: 1 }}\r\n            validationSchema={valuesSchema}\r\n            onSubmit={formValue => {\r\n                onFormSubmit(formValue);\r\n            }}\r\n        >\r\n            {({ handleSubmit, isSubmitting, setFieldValue }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Form.Label className=\"font-content fs-5 fw-bold me-1\">Color :</Form.Label>\r\n                    <Field name=\"color\">\r\n                        {({ field, form: { values } }) => (\r\n                            <ToggleButtonGroup type=\"radio\" name=\"color\" className=\"d-block\">\r\n                                {product_colors?.map(color => (\r\n                                    <ToggleButton\r\n                                        key={uuid()}\r\n                                        value={color}\r\n                                        className={`mx-1 mt-2 font-content border-1 bg-${color} ${setTextColor(color) ? 'text-black' : 'text-white'\r\n                                            }  ${values.color === color ? 'rounded-pill' : null}`}\r\n                                        {...field}\r\n                                        onClick={() => setFieldValue('color', color)}\r\n                                    >\r\n                                        {color}\r\n                                    </ToggleButton>\r\n                                ))}\r\n                            </ToggleButtonGroup>\r\n                        )}\r\n                    </Field>\r\n                    <ErrorMessage name=\"color\">\r\n                        {error => (\r\n                            <Form.Label className=\"d-flex fw-bold me-1 text-red\">{error}</Form.Label>\r\n                        )}\r\n                    </ErrorMessage>\r\n                    <Form.Group className=\"mt-2\" controlId=\"formGridState\">\r\n                        <Form.Label className=\"font-content fs-5 fw-bold me-1\">Size:</Form.Label>\r\n                        <Field name=\"size\">\r\n                            {({ field }) => (\r\n                                <Form.Select className=\"h-50 w-50\" {...field}>\r\n                                    <option className=\"font-content\" selected>\r\n                                        select size\r\n                                    </option>\r\n                                    {product_sizes?.map(size => (\r\n                                        <option className=\"font-content\" key={size} value={size}>\r\n                                            {size}\r\n                                        </option>\r\n                                    ))}\r\n                                </Form.Select>\r\n                            )}\r\n                        </Field>\r\n                        <ErrorMessage name=\"size\">\r\n                            {error => (\r\n                                <Form.Label className=\"d-flex fw-bold me-1 text-red\">{error}</Form.Label>\r\n                            )}\r\n                        </ErrorMessage>\r\n\r\n                        <Form.Label className=\"font-content fs-5 fw-bold me-1\">Quantity:</Form.Label>\r\n                        <Field name=\"quantity\">\r\n                            {({ field }) => (\r\n                                <Form.Select className=\"h-50 w-50\" {...field}>\r\n                                    {[1, 2, 3, 4, 5].map((number, index) => (\r\n                                        <option className=\"font-content\" key={index} value={number}>\r\n                                            {number}\r\n                                        </option>\r\n                                    ))}\r\n                                </Form.Select>\r\n                            )}\r\n                        </Field>\r\n                    </Form.Group>\r\n                    <div className=\"d-flex justify-content-end\">\r\n                        <Button\r\n                            type=\"submit\"\r\n                            size=\"sm\"\r\n                            variant=\"none\"\r\n                            className=\"bg-beige border border-black font-btn fs-5 fw-bold mt-2 text-black\"\r\n                        >\r\n                            Add to cart\r\n                        </Button>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default ShoppingForm;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { Col, Row, Card } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { json, matchRoutes } from 'react-router-dom';\r\nimport BreadCrumb from '../../../components/BreadCrumb';\r\nimport ShoppingForm from '../../../containers/ShoppingForm';\r\nimport { userTypes } from '../../../redux/userModule';\r\nimport { routes } from '../../../router/routesList';\r\nimport uuid from 'react-uuid';\r\nimport { productTypes } from '../../../redux/productModule';\r\n\r\nconst Detail = () => {\r\n  const dispatch = useDispatch();\r\n  const pathName = location.pathname.split('/');\r\n  const categoryName = pathName[pathName.length - 2];\r\n  const productId = pathName[pathName.length - 1];\r\n\r\n  const matchName = location.pathname.startsWith('/wave-sight')\r\n    ? location.pathname.substring('/wave-sight'.length)\r\n    : location.pathname;\r\n  const matches = matchRoutes(routes, matchName);\r\n  const imgRef = useRef();\r\n  const products = useSelector(state => state.product[categoryName]);\r\n  const product = products.find(item => item._id === productId);\r\n  const {\r\n    _id: product_id,\r\n    product_name,\r\n    product_images,\r\n    product_part,\r\n    product_colors,\r\n    product_sizes,\r\n    product_price,\r\n    product_discount,\r\n    product_content,\r\n  } = product || {};\r\n\r\n  const {\r\n    info: { _id: user_id },\r\n  } = useSelector(state => state.user);\r\n\r\n  useEffect(() => {\r\n\r\n    if (!product) {\r\n      dispatch({\r\n        type: productTypes.GET_DETAIL_PRODUCT_REQUEST,\r\n        payload: {\r\n          category: categoryName,\r\n          product_id: productId,\r\n        },\r\n      });\r\n    };\r\n\r\n  }, []);\r\n\r\n  const handleToggleImg = event => {\r\n    imgRef.current.src = event.target.src;\r\n    imgRef.current.title = event.target.title;\r\n  };\r\n\r\n  const imageList = product_images?.map(image => (\r\n    <img\r\n      onClick={handleToggleImg}\r\n      key={uuid()}\r\n      className=\"border border border-light-gray img-thumbnail mb-1 mx-1\"\r\n      src={image}\r\n    />\r\n  ));\r\n\r\n  const handleFormSubmit = ({ color, size, quantity }) => {\r\n\r\n    if (!user_id) {\r\n      dispatch({ type: userTypes.WARNING_MESSAGE_REQUEST, payload: 'Please login your account.' });\r\n      return;\r\n    }\r\n\r\n    const productInfo = {\r\n      product_id,\r\n      product_mark: uuid(),\r\n      product_name,\r\n      product_image: product_images[0],\r\n      product_part,\r\n      product_color: color,\r\n      product_size: size,\r\n      product_quantity: Number(quantity),\r\n      product_discount,\r\n      product_price,\r\n    };\r\n    dispatch({\r\n      type: userTypes.ADD_ITEM_TO_CART_REQUEST,\r\n      payload: { productInfo, user_id },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <BreadCrumb matches={matches} name={product_name} />\r\n      <div className=\"bg-gray\">\r\n        <h1 className=\"border font-title mt-2 text-center text-white\">Detail</h1>\r\n      </div>\r\n      <Row className=\"border m-2 min-vh-100 p-2\">\r\n        <Col xs={4} sm={4} md={2} className=\"mt-1\">\r\n          {imageList}\r\n        </Col>\r\n        <Col xs={8} sm={8} md={4} className=\"mb-2\">\r\n          <img\r\n            ref={imgRef}\r\n            className=\"border border-light-gray img-thumbnail my-1\"\r\n            src={product_images && product_images[0]}\r\n          />\r\n        </Col>\r\n        <Col xs={12} sm={12} md={6}>\r\n          <Card>\r\n            <Card.Body className=\"font-content\">\r\n              <Card.Title className=\"fs-4 fw-bold\">{product_name}</Card.Title>\r\n              <Card.Text className=\"d-flex fs-4 justify-content-end mt-5\">\r\n                <h4 className=\"fw-bold\">{Math.floor(product_price * product_discount)}$</h4>\r\n              </Card.Text>\r\n              <hr />\r\n              <ShoppingForm\r\n                initialValue={{\r\n                  product_colors: product_colors,\r\n                  product_sizes: product_sizes,\r\n                }}\r\n                onFormSubmit={handleFormSubmit}\r\n              />\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        <Col className=\"my-2\">\r\n          <div className=\"font-title fs-2 fw-bold text-center\">Detail Content</div>\r\n          <div className=\"font-content fs-5 mt-2 px-2\">{product_content}</div>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\nexport default Detail;\r\n"],"names":["setTextColor","color","colors","white","black","gray","glue","denim","navy","red","purple","violet","lavender","pink","yellow","beige","orange","brown","coffee","khaki","green","olive","cyan","colorArray","colorValue","substring","i","length","push","parseInt","slice","props","matchName","location","pathname","startsWith","React","Breadcrumb","className","matches","map","match","index","_match$route","route","path","breadcrumbName","key","active","name","NavLink","to","valuesSchema","Yup","shape","required","size","_ref","onFormSubmit","initialValue","product_colors","product_sizes","console","log","Formik","initialValues","quantity","validationSchema","onSubmit","formValue","_ref2","handleSubmit","setFieldValue","isSubmitting","Form","Field","_ref3","field","values","form","ToggleButtonGroup","type","ToggleButton","_extends","uuid","value","concat","onClick","ErrorMessage","error","controlId","_ref4","selected","_ref5","number","Button","variant","dispatch","useDispatch","pathName","split","categoryName","productId","matchRoutes","routes","imgRef","useRef","product","useSelector","state","find","item","_id","product_id","product_name","product_images","product_part","product_price","product_discount","product_content","user_id","user","info","useEffect","productTypes","payload","category","handleToggleImg","event","current","src","target","title","imageList","image","BreadCrumb","Row","Col","xs","sm","md","ref","Card","Math","floor","ShoppingForm","productInfo","product_mark","product_image","product_color","product_size","product_quantity","Number","userTypes"],"sourceRoot":""}